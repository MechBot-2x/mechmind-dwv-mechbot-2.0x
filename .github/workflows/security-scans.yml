name: Security Scans  
on:  
  schedule:  
    - cron: '0 0 * * 1'  # Ejecución semanal  

jobs:  
  codeql-analysis:  
    runs-on: ubuntu-latest  
    steps:  
      - uses: actions/checkout@v4  
      - uses: github/codeql-action/init@v2  
        with:  
          languages: javascript, python  
      - uses: github/codeql-action/analyze@v2  

  trivy-scan:  
    runs-on: ubuntu-latest  
    steps:  
      - uses: actions/checkout@v4  
      - name: Escanear imágenes Docker  
        uses: aquasecurity/trivy-action@0.9.2  
        with:  
          image-ref: 'services/auth-service/Dockerfile'  
          format: 'sarif'
          output: 'trivy-results.sarif'
          
  **Propósito**: Detectar vulnerabilidades en código, dependencias y configuraciones.  
**Herramientas**:  
- **CodeQL**: Análisis estático de código.  
- **Trivy**: Escaneo de imágenes Docker.  
- **TruffleHog**: Detección de secretos expuestos.
**Protecciones de Entorno**:  
   - Approvals manuales para despliegues en producción.  
   - Secrets cifrados con políticas de acceso granular.  

---

### **Conclusión**  
Esta configuración de workflows permite:  
- **Escalabilidad**: Manejo eficiente de un monorepo con múltiples tecnologías.  
- **Seguridad**: Escaneos proactivos en cada capa (código, dependencias, IaC).  
- **Eficiencia**: Paralelización y cacheo para reducir tiempos de ejecución.  

¿Necesitas ajustar algún flujo para requisitos específicos de tu equipo? 🔧
